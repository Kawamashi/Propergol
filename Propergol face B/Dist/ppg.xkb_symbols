// Generated by kalamine on 2025-09-01
//
// This XKB symbols file should be copied to:
//     /usr/share/X11/xkb/symbols/custom
// or
//     $XKB_CONFIG_ROOT/symbols/custom
//
// File          : ppg.xkb_symbols
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : Kawamashi
// Version       : 0.0.5
// License       : WTFPL - Do What The Fuck You Want Public License
//
// Propergol face B
//
// Base layer + dead key
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆ ~   ┃ €   │ <   │ > ⅔ │ $ ¾ │ % ‰ ┃ ^ ‚ │ & ‘ │ | ’ │ #   │ @   ┃ * × ┆ \ ≠ ┆
// ┆ `   ┃ 1 ¢ │ 2 ½ │ 3 ⅓ │ 4 ¼ │ 5 ¶ ┃ 6 ™ │ 7 © │ 8 ∞ │ 9 ° │ 0 § ┃ / ÷ ┆ = ≈ ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ ?   │ É   │ U   │ P   │ !   ┃ V " │ M « │ C » │ J ⇔ │ X   ┃ "   ┆ + ± ┆
//       ┃ , œ │   â │   î │   û │ -   ┃   „ │   “ │   ” │   ↔ │   ← ┃ '   ┆ - − ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ O   │ A   │ I   │ N   │ : ¿ ┃ G   │ T ¡ │ S — │ R   │ L · ┃ [   ┆ ]   ┆
//       ┃   ê │   à │   ï │   ù │ . … ┃  *µ │   ‑ │   – │   → │   £ ┃ _   ┆ ’   ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆ E   ┃ Q   │ Z   │ Y   │ H   │ B { ┃ K } │ D   │ F   │ W   │ ;   ┃
// ┆   è ┃   ô │   æ │  *¨ │   ñ │   ( ┃   ) │   ç │   ß │   @ │**   ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚
//
// AltGr layer
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
// ┆   … ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃  *^ │  *˘ │  *˚ │  *¤ │   ‰ ┃     │  *” │   ≠ │   ¬ │  *` ┃     ┆     ┆
//       ┃   ^ │   { │   } │   $ │   % ┃   # │   " │   = │   ! │   ` ┃     ┆     ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃  *ˇ │     │     │  *˙ │   : ┃  */ │   ÷ │  *¯ │   ± │   × ┃     ┆     ┆
//       ┃   ? │   ( │   ) │   ; │   : ┃   \ │   / │   - │   + │   * ┃     ┆     ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆     ┃     │  *, │  *˛ │     │     ┃     │  *´ │  *¸ │     │  *~ ┃
// ┆   _ ┃   < │   [ │   ] │   > │   @ ┃     │   ' │   & │   | │   ~ ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

partial alphanumeric_keys modifier_keys
xkb_symbols "Kawa" {
    name[group1]= "Propergol face B";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , EuroSign        , U2081           , onesuperior     , cent            , VoidSymbol      ]}; // 1 € ₁ ¹ ¢
    key <AE02> {[ 2               , less            , U2082           , twosuperior     , onehalf         , VoidSymbol      ]}; // 2 < ₂ ² ½
    key <AE03> {[ 3               , greater         , U2083           , threesuperior   , onethird        , twothirds       ]}; // 3 > ₃ ³ ⅓ ⅔
    key <AE04> {[ 4               , dollar          , U2084           , U2074           , onequarter      , threequarters   ]}; // 4 $ ₄ ⁴ ¼ ¾
    key <AE05> {[ 5               , percent         , U2085           , U2075           , paragraph       , U2030           ]}; // 5 % ₅ ⁵ ¶ ‰
    key <AE06> {[ 6               , asciicircum     , U2086           , U2076           , trademark       , U201A           ]}; // 6 ^ ₆ ⁶ ™ ‚
    key <AE07> {[ 7               , ampersand       , U2087           , U2077           , copyright       , U2018           ]}; // 7 & ₇ ⁷ © ‘
    key <AE08> {[ 8               , bar             , U2088           , U2078           , infinity        , U2019           ]}; // 8 | ₈ ⁸ ∞ ’
    key <AE09> {[ 9               , numbersign      , U2089           , U2079           , degree          , VoidSymbol      ]}; // 9 # ₉ ⁹ °
    key <AE10> {[ 0               , at              , U2080           , U2070           , section         , VoidSymbol      ]}; // 0 @ ₀ ⁰ §

    // Letters, first row
    key <AD01> {[ comma           , question        , asciicircum     , dead_circumflex , oe              , OE              ]}; // , ? ^ ^ œ Œ
    key <AD02> {[ eacute          , Eacute          , braceleft       , dead_breve      , acircumflex     , Acircumflex     ]}; // é É { ˘ â Â
    key <AD03> {[ u               , U               , braceright      , dead_abovering  , icircumflex     , Icircumflex     ]}; // u U } ˚ î Î
    key <AD04> {[ p               , P               , dollar          , dead_currency   , ucircumflex     , Ucircumflex     ]}; // p P $ ¤ û Û
    key <AD05> {[ minus           , exclam          , percent         , U2030           , VoidSymbol      , VoidSymbol      ]}; // - ! % ‰
    key <AD06> {[ v               , V               , numbersign      , VoidSymbol      , U201E           , quotedbl        ]}; // v V #   „ "
    key <AD07> {[ m               , M               , quotedbl        , dead_doubleacute, U201C           , guillemotleft   ]}; // m M " ˝ “ «
    key <AD08> {[ c               , C               , equal           , notequal        , U201D           , guillemotright  ]}; // c C = ≠ ” »
    key <AD09> {[ j               , J               , exclam          , notsign         , U2194           , ifonlyif        ]}; // j J ! ¬ ↔ ⇔
    key <AD10> {[ x               , X               , grave           , dead_grave      , leftarrow       , U21D0           ]}; // x X ` ` ← ⇐

    // Letters, second row
    key <AC01> {[ o               , O               , question        , dead_caron      , ecircumflex     , Ecircumflex     ]}; // o O ? ˇ ê Ê
    key <AC02> {[ a               , A               , parenleft       , VoidSymbol      , agrave          , Agrave          ]}; // a A (   à À
    key <AC03> {[ i               , I               , parenright      , VoidSymbol      , idiaeresis      , Idiaeresis      ]}; // i I )   ï Ï
    key <AC04> {[ n               , N               , semicolon       , dead_abovedot   , ugrave          , Ugrave          ]}; // n N ; ˙ ù Ù
    key <AC05> {[ period          , colon           , colon           , colon           , ellipsis        , questiondown    ]}; // . : : : … ¿
    key <AC06> {[ g               , G               , backslash       , dead_stroke     , dead_greek      , VoidSymbol      ]}; // g G \ / µ
    key <AC07> {[ t               , T               , slash           , division        , U2011           , exclamdown      ]}; // t T / ÷ ‑ ¡
    key <AC08> {[ s               , S               , minus           , dead_macron     , endash          , emdash          ]}; // s S - ˉ – —
    key <AC09> {[ r               , R               , plus            , plusminus       , rightarrow      , U21D2           ]}; // r R + ± → ⇒
    key <AC10> {[ l               , L               , asterisk        , multiply        , sterling        , periodcentered  ]}; // l L * × £ ·

    // Letters, third row
    key <AB01> {[ q               , Q               , less            , lessthanequal   , ocircumflex     , Ocircumflex     ]}; // q Q < ≤ ô Ô
    key <AB02> {[ z               , Z               , bracketleft     , dead_belowcomma , ae              , AE              ]}; // z Z [ , æ Æ
    key <AB03> {[ y               , Y               , bracketright    , dead_ogonek     , dead_diaeresis  , VoidSymbol      ]}; // y Y ] ˛ ¨
    key <AB04> {[ h               , H               , greater         , greaterthanequal, ntilde          , Ntilde          ]}; // h H > ≥ ñ Ñ
    key <AB05> {[ b               , B               , at              , VoidSymbol      , parenleft       , braceleft       ]}; // b B @   ( {
    key <AB06> {[ k               , K               , VoidSymbol      , VoidSymbol      , parenright      , braceright      ]}; // k K     ) }
    key <AB07> {[ d               , D               , apostrophe      , dead_acute      , ccedilla        , Ccedilla        ]}; // d D ' ´ ç Ç
    key <AB08> {[ f               , F               , ampersand       , dead_cedilla    , ssharp          , U1E9E           ]}; // f F & ¸ ß ẞ
    key <AB09> {[ w               , W               , bar             , brokenbar       , at              , VoidSymbol      ]}; // w W | ¦ @
    key <AB10> {[ ISO_Level5_Latch, semicolon       , asciitilde      , dead_tilde      , VoidSymbol      , VoidSymbol      ]}; // ' ; ~ ~

    // Pinky keys
    key <AE11> {[ slash           , asterisk        , VoidSymbol      , VoidSymbol      , division        , multiply        ]}; // / *     ÷ ×
    key <AE12> {[ equal           , backslash       , VoidSymbol      , VoidSymbol      , U2248           , notequal        ]}; // = \     ≈ ≠
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AD12> {[ minus           , plus            , VoidSymbol      , VoidSymbol      , U2212           , plusminus       ]}; // - +     − ±
    key <AC11> {[ underscore      , bracketleft     , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // _ [
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , ellipsis        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ` ~ …
    key <BKSL> {[ U2019           , bracketright    , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ’ ]
    key <LSGT> {[ e               , E               , underscore      , VoidSymbol      , egrave          , Egrave          ]}; // e E _   è È

    // Space bar
    key <SPCE> {[ space           , U202F           , space           , nobreakspace    , U2019           , U2019           ]}; //         ’ ’

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
// vim: ft=xkb:fdm=indent:ts=4:nowrap
