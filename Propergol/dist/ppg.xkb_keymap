// Generated by kalamine on 2025-09-22
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 ppg.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : ppg.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : Kawamashi
// Version       : 0.0.5
// License       : WTFPL - Do What The Fuck You Want Public License
//
// Propergol
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆ ~   ┃ €   │ <   │ > ⅔ │ $ ¾ │ % ‰ ┃ ^ ‚ │ & ‘ │ | ’ │ #   │ @   ┃ * × ┆ \ ≠ ┆
  // ┆ `   ┃ 1 ¢ │ 2 ½ │ 3 ⅓ │ 4 ¼ │ 5 ¶ ┃ 6 ™ │ 7 © │ 8 ∞ │ 9 ° │ 0 § ┃ / ÷ ┆ = ≈ ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ ?   │ É   │ U   │ P   │ J ⇔ ┃ V " │ M « │ C » │ ! ¡ │ X   ┃ "   ┆ + ± ┆
  //       ┃ , œ │   â │   î │   û │   ↔ ┃   „ │   “ │   ” │ ’ ‑ │   ← ┃ '   ┆ - − ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ O   │ A   │ I   │ N   │ : ¿ ┃ G   │ T   │ S — │ R   │ L · ┃ [   ┆ ]   ┆
  //       ┃   ê │   à │   ï │   ù │ . … ┃  *µ │   _ │   – │   → │   £ ┃ {   ┆ }   ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ E   ┃ Q   │ Z   │ Y   │ H   │ B   ┃ K   │ D   │ F   │ W   │ ;   ┃
  // ┆   è ┃   ô │   æ │  *¨ │   ñ │   ( ┃   ) │   ç │   ß │   @ │**   ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
  // ┆   … ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃  *^ │  *˘ │  *˚ │  *¤ │   ‰ ┃     │  *” │   ≠ │   ¬ │  *` ┃     ┆     ┆
  //       ┃   ^ │   { │   } │   $ │   % ┃   # │   " │   = │   ! │   ` ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃  *ˇ │     │     │  *˙ │   : ┃  */ │   ÷ │  *¯ │   ± │   × ┃     ┆     ┆
  //       ┃   ? │   ( │   ) │   ; │   : ┃   \ │   / │   - │   + │   * ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃     │  *, │  *˛ │     │     ┃     │  *´ │  *¸ │     │  *~ ┃
  // ┆   _ ┃   < │   [ │   ] │   > │   @ ┃     │   ' │   & │   | │   ~ ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "Kawa" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "Propergol";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , EuroSign        , cent            , VoidSymbol      ],[ U2081           , onesuperior     ]}; // 1 € ¢   ₁ ¹
    key <AE02> {[ 2               , less            , onehalf         , VoidSymbol      ],[ U2082           , twosuperior     ]}; // 2 < ½   ₂ ²
    key <AE03> {[ 3               , greater         , onethird        , twothirds       ],[ U2083           , threesuperior   ]}; // 3 > ⅓ ⅔ ₃ ³
    key <AE04> {[ 4               , dollar          , onequarter      , threequarters   ],[ U2084           , U2074           ]}; // 4 $ ¼ ¾ ₄ ⁴
    key <AE05> {[ 5               , percent         , paragraph       , U2030           ],[ U2085           , U2075           ]}; // 5 % ¶ ‰ ₅ ⁵
    key <AE06> {[ 6               , asciicircum     , trademark       , U201A           ],[ U2086           , U2076           ]}; // 6 ^ ™ ‚ ₆ ⁶
    key <AE07> {[ 7               , ampersand       , copyright       , U2018           ],[ U2087           , U2077           ]}; // 7 & © ‘ ₇ ⁷
    key <AE08> {[ 8               , bar             , infinity        , U2019           ],[ U2088           , U2078           ]}; // 8 | ∞ ’ ₈ ⁸
    key <AE09> {[ 9               , numbersign      , degree          , VoidSymbol      ],[ U2089           , U2079           ]}; // 9 # °   ₉ ⁹
    key <AE10> {[ 0               , at              , section         , VoidSymbol      ],[ U2080           , U2070           ]}; // 0 @ §   ₀ ⁰

    // Letters, first row
    key <AD01> {[ comma           , question        , oe              , OE              ],[ asciicircum     , dead_circumflex ]}; // , ? œ Œ ^ ^
    key <AD02> {[ eacute          , Eacute          , acircumflex     , Acircumflex     ],[ braceleft       , dead_breve      ]}; // é É â Â { ˘
    key <AD03> {[ u               , U               , icircumflex     , Icircumflex     ],[ braceright      , dead_abovering  ]}; // u U î Î } ˚
    key <AD04> {[ p               , P               , ucircumflex     , Ucircumflex     ],[ dollar          , dead_currency   ]}; // p P û Û $ ¤
    key <AD05> {[ j               , J               , U2194           , ifonlyif        ],[ percent         , U2030           ]}; // j J ↔ ⇔ % ‰
    key <AD06> {[ v               , V               , U201E           , quotedbl        ],[ numbersign      , VoidSymbol      ]}; // v V „ " #
    key <AD07> {[ m               , M               , U201C           , guillemotleft   ],[ quotedbl        , dead_doubleacute]}; // m M “ « " ˝
    key <AD08> {[ c               , C               , U201D           , guillemotright  ],[ equal           , notequal        ]}; // c C ” » = ≠
    key <AD09> {[ U2019           , exclam          , U2011           , exclamdown      ],[ exclam          , notsign         ]}; // ’ ! ‑ ¡ ! ¬
    key <AD10> {[ x               , X               , leftarrow       , U21D0           ],[ grave           , dead_grave      ]}; // x X ← ⇐ ` `

    // Letters, second row
    key <AC01> {[ o               , O               , ecircumflex     , Ecircumflex     ],[ question        , dead_caron      ]}; // o O ê Ê ? ˇ
    key <AC02> {[ a               , A               , agrave          , Agrave          ],[ parenleft       , VoidSymbol      ]}; // a A à À (
    key <AC03> {[ i               , I               , idiaeresis      , Idiaeresis      ],[ parenright      , VoidSymbol      ]}; // i I ï Ï )
    key <AC04> {[ n               , N               , ugrave          , Ugrave          ],[ semicolon       , dead_abovedot   ]}; // n N ù Ù ; ˙
    key <AC05> {[ period          , colon           , ellipsis        , questiondown    ],[ colon           , colon           ]}; // . : … ¿ : :
    key <AC06> {[ g               , G               , dead_greek      , VoidSymbol      ],[ backslash       , dead_stroke     ]}; // g G µ   \ /
    key <AC07> {[ t               , T               , underscore      , VoidSymbol      ],[ slash           , division        ]}; // t T _   / ÷
    key <AC08> {[ s               , S               , endash          , emdash          ],[ minus           , dead_macron     ]}; // s S – — - ˉ
    key <AC09> {[ r               , R               , rightarrow      , U21D2           ],[ plus            , plusminus       ]}; // r R → ⇒ + ±
    key <AC10> {[ l               , L               , sterling        , periodcentered  ],[ asterisk        , multiply        ]}; // l L £ · * ×

    // Letters, third row
    key <AB01> {[ q               , Q               , ocircumflex     , Ocircumflex     ],[ less            , lessthanequal   ]}; // q Q ô Ô < ≤
    key <AB02> {[ z               , Z               , ae              , AE              ],[ bracketleft     , dead_belowcomma ]}; // z Z æ Æ [ ,
    key <AB03> {[ y               , Y               , dead_diaeresis  , VoidSymbol      ],[ bracketright    , dead_ogonek     ]}; // y Y ¨   ] ˛
    key <AB04> {[ h               , H               , ntilde          , Ntilde          ],[ greater         , greaterthanequal]}; // h H ñ Ñ > ≥
    key <AB05> {[ b               , B               , parenleft       , VoidSymbol      ],[ at              , VoidSymbol      ]}; // b B (   @
    key <AB06> {[ k               , K               , parenright      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // k K )
    key <AB07> {[ d               , D               , ccedilla        , Ccedilla        ],[ apostrophe      , dead_acute      ]}; // d D ç Ç ' ´
    key <AB08> {[ f               , F               , ssharp          , U1E9E           ],[ ampersand       , dead_cedilla    ]}; // f F ß ẞ & ¸
    key <AB09> {[ w               , W               , at              , VoidSymbol      ],[ bar             , brokenbar       ]}; // w W @   | ¦
    key <AB10> {[ ISO_Level3_Latch, semicolon       , VoidSymbol      , VoidSymbol      ],[ asciitilde      , dead_tilde      ]}; // ' ;     ~ ~

    // Pinky keys
    key <AE11> {[ slash           , asterisk        , division        , multiply        ],[ VoidSymbol      , VoidSymbol      ]}; // / * ÷ ×
    key <AE12> {[ equal           , backslash       , U2248           , notequal        ],[ VoidSymbol      , VoidSymbol      ]}; // = \ ≈ ≠
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AD12> {[ minus           , plus            , U2212           , plusminus       ],[ VoidSymbol      , VoidSymbol      ]}; // - + − ±
    key <AC11> {[ braceleft       , bracketleft     , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // { [
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      ],[ ellipsis        , VoidSymbol      ]}; // ` ~     …
    key <BKSL> {[ braceright      , bracketright    , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // } ]
    key <LSGT> {[ e               , E               , egrave          , Egrave          ],[ underscore      , VoidSymbol      ]}; // e E è È _

    // Space bar
    key <SPCE> {[ space           , U202F           , minus           , minus           ],[ space           , nobreakspace    ]}; //     - -

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
